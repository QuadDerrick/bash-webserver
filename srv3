#!/bin/bash

# usefull vars
port=4616
logfile=log

#less usefull vars
tempfile=tmplugg1
ipbucket=ipbucket
occurance_nr=occurance_nr

echo ""
echo "Super Sweet HttpD 3.0 up and serving"
echo ""
echo -n 'Serving "." @ '$HOSTNAME'. Port :' $port." "
echo Logging to file : $logfile.
echo "With the following syntax :"
echo 'echo -e "HTTP/1.1 200 OK\n\n ." | nc -v -n -l -p '$port' -q 1 >> '$logfile' 2>&1'
echo ""
touch $logfile # create logfile in case it does not exists

while true; do # loop function
echo -e "HTTP/1.1 200 OK\n\n ." | nc -v -n -l -p $port -q 1 > $tempfile 2>&1
# nc -v = verboose, -n = noresolve, -l = listen, -p = port, -q 1 = quit after x seconds
# > $logfile = one > instead of two means overwrite file instead of two that will just write continuously to file
# 2>&1 = log funtion with stdout AND errout(2>&1), netcat uses BOTH to print info

getipinit=$(grep -a 'Connection received on' $tempfile | cut -d " " -f 4 > $ipbucket; sed -i '/^$/d' $ipbucket) # counting function
# grep -a syntax enables binary files to be searched. string 'Connection received on' is to be unique and searchable every time
# cut -d syntax uses space instead of the default, tab, as delimiter. -f 4 only prints 4th collum
# sed command removes empty lines , needed for larger requests
ip=$(tail -1 $ipbucket) # tail -1 to get last line (ip) of ipbucket
grep -a "on $ip" $logfile > $occurance_nr # search ipbucket after specefied ip, put them all in a file
numberoftimes=$(grep -c ^ $occurance_nr) # count number of occurances
echo "$ip connected $numberoftimes time(s) before." >> $tempfile

firstseen=$(sed "/$ip/,/----/!d;/----/q" $logfile | tail -n 2 | head -n 1 | cut -f2- -d:)
# sed searches a file for first string (ip), second string (4 hypens(----)) to get the first match
# in log file. tail -n 2 gets the two last lines of that result. head -n 1 gets the second last line.
# cut -f2- -d: cuts out the last two section of a line delimited by colons.
echo "First observation : " $firstseen >> $tempfile

date=$(date +"%m-%d-%y %R:%S") # rewrite time stamp for concise readabilty, ofcourse.
echo "Current timestamp : " $date >> $tempfile
echo "------------" >> $tempfile
echo "" >> $tempfile
cat $tempfile # display last incomming result in console
cat $tempfile >> $logfile # write to logfile
done # reloop
